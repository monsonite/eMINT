0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $0800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 6A 0A               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 6C 0A               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 6E 0A               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 70 0A               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 72 0A               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 74 0A               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 78 0A               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 7A 0A               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 7C 0A               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 7E 0A               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 08               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 6A 0A               LD   (RST08),HL   
0094   22 6C 0A               LD   (RST10),HL   
0097   22 6E 0A               LD   (RST18),HL   
009A   22 70 0A               LD   (RST20),HL   
009D   22 72 0A               LD   (RST28),HL   
00A0   22 74 0A               LD   (RST30),HL   
00A3   22 78 0A               LD   (INTVEC),HL   
00A6   22 7A 0A               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 7C 0A               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 7E 0A               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 80 01               JP   start   
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;       MINT Minimal Interpreter for the Z80
00C6                             ; 
00C6                             ;       Ken Boak, John Hardy and Craig Jones.
00C6                             ; 
00C6                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
00C6                             ; 
00C6                             ;       see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                DSIZE:    EQU   $80   
00C6                RSIZE:    EQU   $80   
00C6                TIBSIZE:   EQU   $100   
00C6                TRUE:     EQU   1   
00C6                FALSE:    EQU   0   
00C6                NUMGRPS:   EQU   5   
00C6                GRPSIZE:   EQU   $40   
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   
0180                START:       
0180                MINT:        
0180   31 80 08               LD   SP,DSTACK   
0183   CD A7 01               CALL   initialize   
0186   CD 8B 07               CALL   printStr   
0189   4D 49 4E 54 20 56 31 2E 30 0D 0A 00 .CSTR   "MINT V1.0\r\n"   
0195   18 4A                  JR   interpret   
0197                             ; ***********************************************************************
0197                             ; Initial values for user mintVars		
0197                             ; ***********************************************************************		
0197                ISYSVARS:      
0197   80 08                  DW   dStack   ; a vS0
0199   00 00                  DW   FALSE   ; b vBase16
019B   00 00                  DW   0   ; c vTIBPtr
019D   C0 0A                  DW   DEFS   ; d vDEFS
019F   00 00                  DW   0   ; e vEdited the last command to be edited
01A1   00 00                  DW   0   ; f
01A3   00 00                  DW   0   ; g
01A5   00 0C                  DW   HEAP   ; h vHeapPtr
01A7                INITIALIZE:      
01A7   DD 21 00 09            LD   IX,RSTACK   
01AB   FD 21 47 02            LD   IY,NEXT   ; IY provides a faster jump to NEXT
01AF   21 97 01               LD   HL,iSysVars   
01B2   11 00 0A               LD   DE,sysVars   
01B5   01 10 00               LD   BC,8 * 2   
01B8   ED B0                  LDIR      
01BA   21 C0 0A               LD   HL,DEFS   
01BD   06 A0                  LD   B,GRPSIZE/2 * NUMGRPS   
01BF                INIT1:       
01BF   36 98                  LD   (HL),lsb(empty_)   
01C1   23                     INC   HL   
01C2   36 02                  LD   (HL),msb(empty_)   
01C4   23                     INC   HL   
01C5   10 F8                  DJNZ   init1   
01C7   C9                     RET      
01C8                MACRO:       ;=25
01C8   ED 43 04 0A            LD   (vTIBPtr),BC   
01CC   21 80 03               LD   HL,ctrlCodes   
01CF   85                     ADD   A,L   
01D0   6F                     LD   L,A   
01D1   5E                     LD   E,(HL)   
01D2   16 02                  LD   D,msb(macros)   
01D4   D5                     PUSH   DE   
01D5   CD 70 07               CALL   ENTER   
01D8   5C 47 00               .CSTR   "\\G"   
01DB   ED 4B 04 0A            LD   BC,(vTIBPtr)   
01DF   18 11                  JR   interpret2   
01E1                INTERPRET:      
01E1   CD 70 07               CALL   ENTER   
01E4   5C 4E 60 3E 20 60 00   .CSTR   "\\N`> `"   
01EB                INTERPRET1:      ; used by tests
01EB   01 00 00               LD   BC,0   ; load BC with offset into TIB
01EE   ED 43 04 0A            LD   (vTIBPtr),BC   
01F2                INTERPRET2:      ; calc nesting (a macro might have changed it)
01F2   1E 00                  LD   E,0   ; initilize nesting value
01F4   C5                     PUSH   BC   ; save offset into TIB,
01F5                             ; BC is also the count of chars in TIB
01F5   21 00 09               LD   HL,TIB   ; HL is start of TIB
01F8   18 06                  JR   interpret4   
01FA                INTERPRET3:      
01FA   7E                     LD   A,(HL)   ; A = char in TIB
01FB   23                     INC   HL   ; inc pointer into TIB
01FC   0B                     DEC   BC   ; dec count of chars in TIB
01FD   CD 63 02               CALL   nesting   ; update nesting value
0200                INTERPRET4:      
0200   79                     LD   A,C   ; is count zero?
0201   B0                     OR   B   
0202   20 F6                  JR   NZ,interpret3   ; if not loop
0204   C1                     POP   BC   ; restore offset into TIB
0205                             ; *******************************************************************
0205                             ; Wait for a character from the serial input (keyboard)
0205                             ; and store it in the text buffer. Keep accepting characters,
0205                             ; increasing the instruction pointer BC - until a newline received.
0205                             ; *******************************************************************
0205                WAITCHAR:      
0205   CD 81 00               CALL   getchar   ; loop around waiting for character
0208   FE 20                  CP   $20   
020A   30 0C                  JR   NC,waitchar1   
020C   FE 00                  CP   $0   ; is it end of string?
020E   28 2C                  JR   Z,waitchar4   
0210   FE 0D                  CP   "\r"   ; carriage return?
0212   28 12                  JR   Z,waitchar3   
0214   16 00                  LD   D,0   
0216   18 B0                  JR   macro   
0218                WAITCHAR1:      
0218   21 00 09               LD   HL,TIB   
021B   09                     ADD   HL,BC   
021C   77                     LD   (HL),A   ; store the character in textbuf
021D   03                     INC   BC   
021E   CD 85 00               CALL   putchar   ; echo character to screen
0221   CD 63 02               CALL   nesting   
0224   18 DF                  JR   waitchar   ; wait for next character
0226                WAITCHAR3:      
0226   21 00 09               LD   HL,TIB   
0229   09                     ADD   HL,BC   
022A   36 0D                  LD   (HL),"\r"   ; store the crlf in textbuf
022C   23                     INC   HL   
022D   36 0A                  LD   (HL),"\n"   
022F   23                     INC   HL   ; ????
0230   03                     INC   BC   
0231   03                     INC   BC   
0232   CD 69 07               CALL   crlf   ; echo character to screen
0235   7B                     LD   A,E   ; if zero nesting append and ETX after \r
0236   B7                     OR   A   
0237   20 CC                  JR   NZ,waitchar   
0239   36 03                  LD   (HL),$03   ; store end of text ETX in text buffer
023B   03                     INC   BC   
023C                WAITCHAR4:      
023C   ED 43 04 0A            LD   (vTIBPtr),BC   
0240   01 00 09               LD   BC,TIB   ; Instructions stored on heap at address HERE
0243   0B                     DEC   BC   
0244   C3 47 02               JP   NEXT   
0247                             ; ********************************************************************************
0247                             ; 
0247                             ; Dispatch Routine.
0247                             ; 
0247                             ; Get the next character and form a 1 byte jump address
0247                             ; 
0247                             ; This target jump address is loaded into HL, and using JP (HL) to quickly
0247                             ; jump to the selected function.
0247                             ; 
0247                             ; Individual handler routines will deal with each category:
0247                             ; 
0247                             ; 1. Detect characters A-Z and jump to the User Command handler routine
0247                             ; 
0247                             ; 2. Detect characters a-z and jump to the variable handler routine
0247                             ; 
0247                             ; 3. All other characters are punctuation and cause a jump to the associated
0247                             ; primitive code.
0247                             ; 
0247                             ; Instruction Pointer IP BC is incremented
0247                             ; 
0247                             ; *********************************************************************************
0247                NEXT:        ; 9
0247   03                     INC   BC   ; 6t    Increment the IP
0248   0A                     LD   A,(BC)   ; 7t    Get the next character and dispatch
0249   6F                     LD   L,A   ; 4t    Index into table
024A   26 03                  LD   H,msb(opcodes)   ; 7t    Start address of jump table
024C   6E                     LD   L,(HL)   ; 7t    get low jump address
024D   26 04                  LD   H,msb(page4)   ; 7t    Load H with the 1st page address
024F   E9                     JP   (HL)   ; 4t    Jump to routine
0250                             ; ARRAY compilation routine
0250                COMPNEXT:      ;=20
0250   D1                     POP   DE   ; DE = return address
0251   2A 0E 0A               LD   HL,(vHeapPtr)   ; load heap ptr
0254   73                     LD   (HL),E   ; store lsb
0255   3A 36 0A               LD   A,(vByteMode)   
0258   23                     INC   HL   
0259   B7                     OR   A   
025A   20 02                  JR   NZ,compNext1   
025C   72                     LD   (HL),D   
025D   23                     INC   HL   
025E                COMPNEXT1:      
025E   22 0E 0A               LD   (vHeapPtr),HL   ; save heap ptr
0261   18 E4                  JR   NEXT   
0263                             ; **************************************************************************
0263                             ; calculate nesting value
0263                             ; A is char to be tested,
0263                             ; E is the nesting value (initially 0)
0263                             ; E is increased by ( and [
0263                             ; E is decreased by ) and ]
0263                             ; E has its bit 7 toggled by `
0263                             ; limited to 127 levels
0263                             ; **************************************************************************
0263                NESTING:      ;= 44
0263   FE 60                  CP   "`"   
0265   20 0A                  JR   NZ,nesting1   
0267   CB 7B                  BIT   7,E   
0269   28 03                  JR   Z,nesting1a   
026B   CB BB                  RES   7,E   
026D   C9                     RET      
026E                NESTING1A:      
026E   CB FB                  SET   7,E   
0270   C9                     RET      
0271                NESTING1:      
0271   CB 7B                  BIT   7,E   
0273   C0                     RET   NZ   
0274   FE 3A                  CP   ":"   
0276   28 08                  JR   Z,nesting2   
0278   FE 5B                  CP   "["   
027A   28 04                  JR   Z,nesting2   
027C   FE 28                  CP   "("   
027E   20 02                  JR   NZ,nesting3   
0280                NESTING2:      
0280   1C                     INC   E   
0281   C9                     RET      
0282                NESTING3:      
0282   FE 3B                  CP   ";"   
0284   28 07                  JR   Z,nesting4   
0286   FE 5D                  CP   "]"   
0288   28 03                  JR   Z,nesting4   
028A   FE 29                  CP   ")"   
028C   C0                     RET   NZ   
028D                NESTING4:      
028D   1D                     DEC   E   
028E   C9                     RET      
028F                PROMPT:      ;=9
028F   CD 8B 07               CALL   printStr   
0292   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0297   C9                     RET      
0298                             ; **************************************************************************
0298                             ; Macros must be written in Mint and end with ;
0298                             ; this code must not span pages
0298                             ; **************************************************************************
0298                MACROS:      
0298                EMPTY_:      
0298   3B                     DB   ";"   
0299                BACKSP_:      
0299   5C 63 40 30 3D 30 3D 28 31 5F 5C 63 5C 2B 60 08 20 08 60 29 3B DB   "\\c@0=0=(1_\\c\\+`\b \b`);"   
02AE                REEDIT_:      
02AE   5C 65 5C 40 5C 5A 3B   DB   "\\e\\@\\Z;"   
02B5                EDIT_:       
02B5   60 3F 60 5C 4B 5C 4E 60 3E 20 60 5C 5E 41 2D 5C 5A 3B 00 .CSTR   "`?`\\K\\N`> `\\^A-\\Z;"   
02C8                LIST_:       
02C8   5C 4E 32 36 28 5C 69 40 5C 5A 5C 63 40 30 3E 28 5C 4E 29 29 5C 4E 60 3E 20 60 3B 00 .CSTR   "\\N26(\\i@\\Z\\c@0>(\\N))\\N`> `;"   
02E4                PRINTSTACK_:      
02E4   60 3D 3E 20 60 5C 50 5C 4E 5C 4E 60 3E 20 60 3B 00 .CSTR   "`=> `\\P\\N\\N`> `;"   
02F5                TOGGLEBASE_:      
02F5   5C 62 40 30 3D 5C 62 21 3B 00 .CSTR   "\\b@0=\\b!;"   
02FF                             ; **************************************************************************
02FF                             ; Page 2  Jump Tables
02FF                             ; **************************************************************************
02FF                          ALIGN   $100   
0300                OPCODES:      
0300                             ; ***********************************************************************
0300                             ; Initial values for user mintVars		
0300                             ; ***********************************************************************		
0300   7A                     DB   lsb(exit_)   ;   NUL
0301   8E                     DB   lsb(nop_)   ;   SOH
0302   8E                     DB   lsb(nop_)   ;   STX
0303   6E                     DB   lsb(etx_)   ;   ETX
0304   8E                     DB   lsb(nop_)   ;   EOT
0305   8E                     DB   lsb(nop_)   ;   ENQ
0306   8E                     DB   lsb(nop_)   ;   ACK
0307   8E                     DB   lsb(nop_)   ;   BEL
0308   8E                     DB   lsb(nop_)   ;   BS
0309   8E                     DB   lsb(nop_)   ;   TAB
030A   8E                     DB   lsb(nop_)   ;   LF
030B   8E                     DB   lsb(nop_)   ;   VT
030C   8E                     DB   lsb(nop_)   ;   FF
030D   8E                     DB   lsb(nop_)   ;   CR
030E   8E                     DB   lsb(nop_)   ;   SO
030F   8E                     DB   lsb(nop_)   ;   SI
0310   8E                     DB   lsb(nop_)   ;   DLE
0311   8E                     DB   lsb(nop_)   ;   DC1
0312   8E                     DB   lsb(nop_)   ;   DC2
0313   8E                     DB   lsb(nop_)   ;   DC3
0314   8E                     DB   lsb(nop_)   ;   DC4
0315   8E                     DB   lsb(nop_)   ;   NAK
0316   8E                     DB   lsb(nop_)   ;   SYN
0317   8E                     DB   lsb(nop_)   ;   ETB
0318   8E                     DB   lsb(nop_)   ;   CAN
0319   8E                     DB   lsb(nop_)   ;   EM
031A   8E                     DB   lsb(nop_)   ;   SUB
031B   8E                     DB   lsb(nop_)   ;   ESC
031C   8E                     DB   lsb(nop_)   ;   FS
031D   8E                     DB   lsb(nop_)   ;   GS
031E   8E                     DB   lsb(nop_)   ;   RS
031F   8E                     DB   lsb(nop_)   ;   US
0320   8E                     DB   lsb(nop_)   ;   SP
0321   A2                     DB   lsb(store_)   ;   !
0322   69                     DB   lsb(dup_)   ;   "
0323   8B                     DB   lsb(hex_)   ;    #
0324   A9                     DB   lsb(swap_)   ;    $
0325   94                     DB   lsb(over_)   ;    %
0326   03                     DB   lsb(and_)   ;    &
0327   66                     DB   lsb(drop_)   ;    '
0328   40                     DB   lsb(begin_)   ;    (
0329   FC                     DB   lsb(again_)   ;    )
032A   F9                     DB   lsb(mul_)   ;    *
032B   25                     DB   lsb(add_)   ;    +
032C   55                     DB   lsb(hdot_)   ;    ,
032D   C1                     DB   lsb(sub_)   ;    -
032E   5B                     DB   lsb(dot_)   ;    .
032F   F7                     DB   lsb(div_)   ;    /
0330   91                     DB   lsb(num_)   ;    0
0331   91                     DB   lsb(num_)   ;    1
0332   91                     DB   lsb(num_)   ;    2
0333   91                     DB   lsb(num_)   ;    3
0334   91                     DB   lsb(num_)   ;    4
0335   91                     DB   lsb(num_)   ;    5
0336   91                     DB   lsb(num_)   ;    6
0337   91                     DB   lsb(num_)   ;    7
0338   91                     DB   lsb(num_)   ;    8
0339   91                     DB   lsb(num_)   ;    9
033A   52                     DB   lsb(def_)   ;    :
033B   9B                     DB   lsb(ret_)   ;    ;
033C   DC                     DB   lsb(lt_)   ;    <
033D   C9                     DB   lsb(eq_)   ;    =
033E   D8                     DB   lsb(gt_)   ;    >
033F   D5                     DB   lsb(getRef_)   ;    ?
0340   84                     DB   lsb(fetch_)   ;    @
0341   43                     DB   lsb(call_)   ;    A
0342   43                     DB   lsb(call_)   ;    B
0343   43                     DB   lsb(call_)   ;    C
0344   43                     DB   lsb(call_)   ;    D
0345   43                     DB   lsb(call_)   ;    E
0346   43                     DB   lsb(call_)   ;    F
0347   43                     DB   lsb(call_)   ;    G
0348   43                     DB   lsb(call_)   ;    H
0349   43                     DB   lsb(call_)   ;    I
034A   43                     DB   lsb(call_)   ;    J
034B   43                     DB   lsb(call_)   ;    K
034C   43                     DB   lsb(call_)   ;    L
034D   43                     DB   lsb(call_)   ;    M
034E   43                     DB   lsb(call_)   ;    N
034F   43                     DB   lsb(call_)   ;    O
0350   43                     DB   lsb(call_)   ;    P
0351   43                     DB   lsb(call_)   ;    Q
0352   43                     DB   lsb(call_)   ;    R
0353   43                     DB   lsb(call_)   ;    S
0354   43                     DB   lsb(call_)   ;    T
0355   43                     DB   lsb(call_)   ;    U
0356   43                     DB   lsb(call_)   ;    V
0357   43                     DB   lsb(call_)   ;    W
0358   43                     DB   lsb(call_)   ;    X
0359   43                     DB   lsb(call_)   ;    Y
035A   43                     DB   lsb(call_)   ;    Z
035B   2B                     DB   lsb(arrDef_)   ;    [
035C   00                     DB   lsb(alt_)   ;    \
035D   3D                     DB   lsb(arrEnd_)   ;    ]
035E   17                     DB   lsb(xor_)   ;    ^
035F   BB                     DB   lsb(neg_)   ;    _
0360   FF                     DB   lsb(str_)   ;    `
0361   ED                     DB   lsb(var_)   ;    a
0362   ED                     DB   lsb(var_)   ;    b
0363   ED                     DB   lsb(var_)   ;    c
0364   ED                     DB   lsb(var_)   ;    d
0365   ED                     DB   lsb(var_)   ;    e
0366   ED                     DB   lsb(var_)   ;    f
0367   ED                     DB   lsb(var_)   ;    g
0368   ED                     DB   lsb(var_)   ;    h
0369   ED                     DB   lsb(var_)   ;    i
036A   ED                     DB   lsb(var_)   ;    j
036B   ED                     DB   lsb(var_)   ;    k
036C   ED                     DB   lsb(var_)   ;    l
036D   ED                     DB   lsb(var_)   ;    m
036E   ED                     DB   lsb(var_)   ;    n
036F   ED                     DB   lsb(var_)   ;    o
0370   ED                     DB   lsb(var_)   ;    p
0371   ED                     DB   lsb(var_)   ;    q
0372   ED                     DB   lsb(var_)   ;    r
0373   ED                     DB   lsb(var_)   ;    s
0374   ED                     DB   lsb(var_)   ;    t
0375   ED                     DB   lsb(var_)   ;    u
0376   ED                     DB   lsb(var_)   ;    v
0377   ED                     DB   lsb(var_)   ;    w
0378   ED                     DB   lsb(var_)   ;    x
0379   ED                     DB   lsb(var_)   ;    y
037A   ED                     DB   lsb(var_)   ;    z
037B   AE                     DB   lsb(shl_)   ;    {
037C   0E                     DB   lsb(or_)   ;    |
037D   B3                     DB   lsb(shr_)   ;    }
037E   20                     DB   lsb(inv_)   ;    ~
037F   8E                     DB   lsb(nop_)   ;    backspace
0380                             ; ***********************************************************************
0380                             ; Alternate function codes		
0380                             ; ***********************************************************************		
0380                CTRLCODES:      
0380                ALTCODES:      
0380   98                     DB   lsb(empty_)   ; NUL ^@
0381   98                     DB   lsb(empty_)   ; SOH ^A
0382   F5                     DB   lsb(toggleBase_)   ; STX ^B
0383   98                     DB   lsb(empty_)   ; ETX ^C
0384   98                     DB   lsb(empty_)   ; EOT ^D
0385   B5                     DB   lsb(edit_)   ; ENQ ^E
0386   98                     DB   lsb(empty_)   ; ACK ^F
0387   98                     DB   lsb(empty_)   ; BEL ^G
0388   99                     DB   lsb(backsp_)   ; BS  ^H
0389   98                     DB   lsb(empty_)   ; TAB ^I
038A   AE                     DB   lsb(reedit_)   ; LF  ^J
038B   98                     DB   lsb(empty_)   ; VT  ^K
038C   C8                     DB   lsb(list_)   ; FF  ^L
038D   98                     DB   lsb(empty_)   ; CR  ^M
038E   98                     DB   lsb(empty_)   ; SO  ^N
038F   98                     DB   lsb(empty_)   ; SI  ^O
0390   E4                     DB   lsb(printStack_)   ; DLE ^P
0391   98                     DB   lsb(empty_)   ; DC1 ^Q
0392   98                     DB   lsb(empty_)   ; DC2 ^R
0393   98                     DB   lsb(empty_)   ; DC3 ^S
0394   98                     DB   lsb(empty_)   ; DC4 ^T
0395   98                     DB   lsb(empty_)   ; NAK ^U
0396   98                     DB   lsb(empty_)   ; SYN ^V
0397   98                     DB   lsb(empty_)   ; ETB ^W
0398   98                     DB   lsb(empty_)   ; CAN ^X
0399   98                     DB   lsb(empty_)   ; EM  ^Y
039A   98                     DB   lsb(empty_)   ; SUB ^Z
039B   98                     DB   lsb(empty_)   ; ESC ^[
039C   98                     DB   lsb(empty_)   ; FS  ^\
039D   98                     DB   lsb(empty_)   ; GS  ^]
039E   98                     DB   lsb(empty_)   ; RS  ^^
039F   98                     DB   lsb(empty_)   ; US  ^_)
03A0   0A                     DB   lsb(aNop_)   ; SP  ^`
03A1   1D                     DB   lsb(cStore_)   ;    !
03A2   0A                     DB   lsb(aNop_)   ;    "
03A3   0A                     DB   lsb(aNop_)   ;    #
03A4   0A                     DB   lsb(aNop_)   ;    $  ( -- adr ) text input ptr
03A5   0A                     DB   lsb(aNop_)   ;    %
03A6   0A                     DB   lsb(aNop_)   ;    &
03A7   0A                     DB   lsb(aNop_)   ;    '
03A8   37                     DB   lsb(ifte_)   ;    (  ( b -- )
03A9   0A                     DB   lsb(aNop_)   ;    )
03AA   0A                     DB   lsb(aNop_)   ;    *
03AB   8B                     DB   lsb(incr_)   ;    +  ( adr -- ) decrements variable at address
03AC   0A                     DB   lsb(aNop_)   ;    ,
03AD   0A                     DB   lsb(aNop_)   ;    -
03AE   0A                     DB   lsb(aNop_)   ;    .
03AF   0A                     DB   lsb(aNop_)   ;    /
03B0   0A                     DB   lsb(aNop_)   ;    0
03B1   0A                     DB   lsb(aNop_)   ;    1
03B2   0A                     DB   lsb(aNop_)   ;    2
03B3   0A                     DB   lsb(aNop_)   ;    3
03B4   0A                     DB   lsb(aNop_)   ;    4
03B5   0A                     DB   lsb(aNop_)   ;    5
03B6   0A                     DB   lsb(aNop_)   ;    6
03B7   0A                     DB   lsb(aNop_)   ;    7
03B8   0A                     DB   lsb(aNop_)   ;    8
03B9   0A                     DB   lsb(aNop_)   ;    9
03BA   0A                     DB   lsb(aNop_)   ;    :  start defining a macro
03BB   0A                     DB   lsb(aNop_)   ;    ;
03BC   0A                     DB   lsb(aNop_)   ;    <
03BD   0A                     DB   lsb(aNop_)   ;    =
03BE   0A                     DB   lsb(aNop_)   ;    >
03BF   0A                     DB   lsb(aNop_)   ;    ?
03C0   05                     DB   lsb(cFetch_)   ;    @
03C1   0A                     DB   lsb(aNop_)   ;    A
03C2   C9                     DB   lsb(break_)   ;    B
03C3   8E                     DB   lsb(nop_)   ;    C
03C4   22                     DB   lsb(depth_)   ;    D  ( -- val ) depth of data stack
03C5   30                     DB   lsb(emit_)   ;    E   ( val -- ) emits a char to output
03C6   0A                     DB   lsb(aNop_)   ;    F
03C7   51                     DB   lsb(go_)   ;    G   ( -- ? ) execute mint definition
03C8   0A                     DB   lsb(aNop_)   ;    H
03C9   96                     DB   lsb(inPort_)   ;    I  ( port -- val )
03CA   0A                     DB   lsb(aNop_)   ;    J
03CB   AB                     DB   lsb(key_)   ;    K  ( -- val )  read a char from input
03CC   0A                     DB   lsb(aNop_)   ;    L
03CD   0A                     DB   lsb(aNop_)   ;    M
03CE   B4                     DB   lsb(newln_)   ;    N   ; prints a newline to output
03CF   B9                     DB   lsb(outPort_)   ;    O  ( val port -- )
03D0   D8                     DB   lsb(printStk_)   ;    P  ( -- ) non-destructively prints stack
03D1   0A                     DB   lsb(aNop_)   ;    Q  quits from Mint REPL
03D2   C2                     DB   lsb(rot_)   ;    R  ( a b c -- b c a )
03D3   0A                     DB   lsb(aNop_)   ;    S
03D4   0A                     DB   lsb(aNop_)   ;    T
03D5   0A                     DB   lsb(aNop_)   ;    U
03D6   0A                     DB   lsb(aNop_)   ;    V
03D7   0A                     DB   lsb(aNop_)   ;    W   ; ( b -- ) if false, skip to end of loop
03D8   49                     DB   lsb(exec_)   ;    X
03D9   0A                     DB   lsb(aNop_)   ;    Y
03DA   DA                     DB   lsb(editDef_)   ;    Z
03DB   00                     DB   lsb(cArrDef_)   ;    [
03DC   14                     DB   lsb(comment_)   ;    \  comment text, skips reading until end of line
03DD   0A                     DB   lsb(aNop_)   ;    ]
03DE   0C                     DB   lsb(charCode_)   ;    ^
03DF   0A                     DB   lsb(aNop_)   ;    _
03E0   0A                     DB   lsb(aNop_)   ;    `
03E1   7D                     DB   lsb(sysVar_)   ;    a  ; start of data stack variable
03E2   7D                     DB   lsb(sysVar_)   ;    b  ; base16 variable
03E3   7D                     DB   lsb(sysVar_)   ;    c  ; TIBPtr variable
03E4   7D                     DB   lsb(sysVar_)   ;    d
03E5   7D                     DB   lsb(sysVar_)   ;    e
03E6   7D                     DB   lsb(sysVar_)   ;    f
03E7   7D                     DB   lsb(sysVar_)   ;    g
03E8   7D                     DB   lsb(sysVar_)   ;    h  ; heap ptr variable
03E9   87                     DB   lsb(i_)   ;    i  ; returns index variable of current loop
03EA   A1                     DB   lsb(j_)   ;    j  ; returns index variable of outer loop
03EB   7D                     DB   lsb(sysVar_)   ;    k
03EC   7D                     DB   lsb(sysVar_)   ;    l
03ED   7D                     DB   lsb(sysVar_)   ;    m  ( a b -- c ) return the minimum value
03EE   7D                     DB   lsb(sysVar_)   ;    n
03EF   7D                     DB   lsb(sysVar_)   ;    o
03F0   7D                     DB   lsb(sysVar_)   ;    p
03F1   7D                     DB   lsb(sysVar_)   ;    q
03F2   7D                     DB   lsb(sysVar_)   ;    r
03F3   7D                     DB   lsb(sysVar_)   ;    s
03F4   7D                     DB   lsb(sysVar_)   ;    t
03F5   7D                     DB   lsb(sysVar_)   ;    u
03F6   7D                     DB   lsb(sysVar_)   ;    v
03F7   7D                     DB   lsb(sysVar_)   ;    w
03F8   7D                     DB   lsb(sysVar_)   ;    x
03F9   7D                     DB   lsb(sysVar_)   ;    y
03FA   7D                     DB   lsb(sysVar_)   ;    z
03FB   62                     DB   lsb(group_)   ;    {
03FC   0A                     DB   lsb(aNop_)   ;    |
03FD   5A                     DB   lsb(endGroup_)   ;    }
03FE   0A                     DB   lsb(aNop_)   ;    ~
03FF   0A                     DB   lsb(aNop_)   ;    BS		
0400                             ; **********************************************************************			
0400                             ; Page 4 primitive routines
0400                             ; **********************************************************************
0400                          ALIGN   $100   
0400                PAGE4:       
0400                ALT_:        
0400   C3 16 05               JP   alt   
0403                AND_:        
0403   D1                     POP   DE   ; 10t Bitwise AND the top 2 elements of the stack
0404   E1                     POP   HL   ; 10t
0405   7B                     LD   A,E   ; 4t
0406   A5                     AND   L   ; 4t
0407   6F                     LD   L,A   ; 4t
0408   7A                     LD   A,D   ; 4t
0409   A4                     AND   H   ; 4t
040A                AND1:        
040A   67                     LD   H,A   ; 4t
040B   E5                     PUSH   HL   ; 11t
040C   FD E9                  JP   (IY)   ; 8t
040E                             ; 63t
040E                OR_:         
040E   D1                     POP   DE   ; Bitwise OR the top 2 elements of the stack
040F   E1                     POP   HL   
0410   7B                     LD   A,E   
0411   B5                     OR   L   
0412   6F                     LD   L,A   
0413   7A                     LD   A,D   
0414   B4                     OR   H   
0415   18 F3                  JR   and1   
0417                XOR_:        
0417   D1                     POP   DE   ; Bitwise XOR the top 2 elements of the stack
0418                XOR1:        
0418   E1                     POP   HL   
0419   7B                     LD   A,E   
041A   AD                     XOR   L   
041B   6F                     LD   L,A   
041C   7A                     LD   A,D   
041D   AC                     XOR   H   
041E   18 EA                  JR   and1   
0420                INV_:        ; Bitwise INVert the top member of the stack
0420   11 FF FF               LD   DE,$FFFF   ; by xoring with $FFFF
0423   18 F3                  JR   xor1   
0425                ADD_:        ; Add the top 2 members of the stack
0425   D1                     POP   DE   ; 10t
0426   E1                     POP   HL   ; 10t
0427   19                     ADD   HL,DE   ; 11t
0428   E5                     PUSH   HL   ; 11t
0429   FD E9                  JP   (IY)   ; 8t
042B                             ; 50t
042B                ARRDEF_:      
042B                ARRDEF:      ;= 18
042B   3E 00                  LD   A,FALSE   
042D                ARRDEF1:      
042D   FD 21 50 02            LD   IY,compNEXT   
0431   32 36 0A               LD   (vByteMode),A   
0434   2A 0E 0A               LD   HL,(vHeapPtr)   ; HL = heap ptr
0437   CD DC 07               CALL   rpush   ; save start of array \[  \]
043A   C3 47 02               JP   NEXT   ; hardwired to NEXT
043D   C3 30 07     ARREND_:   JP   arrEnd   
0440   C3 9F 05     BEGIN_:   JP   begin   
0443                CALL_:       
0443   60 69                  LD   HL,BC   
0445   CD DC 07               CALL   rpush   ; save Instruction Pointer
0448   0A                     LD   A,(BC)   
0449   CD 80 07               CALL   lookupDef1   
044C   4E                     LD   C,(HL)   
044D   23                     INC   HL   
044E   46                     LD   B,(HL)   
044F   0B                     DEC   BC   
0450   FD E9                  JP   (IY)   ; Execute code from User def
0452   C3 5F 05     DEF_:     JP   def   
0455                HDOT_:       ; print hexadecimal
0455   E1                     POP   HL   
0456   CD D1 07               CALL   printhex   
0459   18 04                  JR   dot2   
045B                DOT_:        
045B   E1                     POP   HL   
045C   CD 99 07               CALL   printdec   
045F                DOT2:        
045F   3E 20                  LD   A," "   
0461   CD F4 07               CALL   writeChar1   
0464   FD E9                  JP   (IY)   
0466                DROP_:       ; Discard the top member of the stack
0466   E1                     POP   HL   
0467   FD E9                  JP   (IY)   
0469                DUP_:        
0469   E1                     POP   HL   ; Duplicate the top member of the stack
046A   E5                     PUSH   HL   
046B   E5                     PUSH   HL   
046C   FD E9                  JP   (IY)   
046E                ETX_:        
046E                ETX:         
046E   21 80 F7               LD   HL,-DSTACK   
0471   39                     ADD   HL,SP   
0472   30 03                  JR   NC,etx1   
0474   31 80 08               LD   SP,DSTACK   
0477                ETX1:        
0477   C3 E1 01               JP   interpret   
047A                EXIT_:       
047A   03                     INC   BC   
047B   50 59                  LD   DE,BC   
047D   CD E7 07               CALL   rpop   ; Restore Instruction pointer
0480   44 4D                  LD   BC,HL   
0482   EB                     EX   DE,HL   
0483   E9                     JP   (HL)   
0484                FETCH_:      ; Fetch the value from the address placed on the top of the stack
0484   E1                     POP   HL   ; 10t
0485                FETCH1:      
0485   5E                     LD   E,(HL)   ; 7t
0486   23                     INC   HL   ; 6t
0487   56                     LD   D,(HL)   ; 7t
0488   D5                     PUSH   DE   ; 11t
0489   FD E9                  JP   (IY)   ; 8t
048B   C3 4C 07     HEX_:     JP   hex   
048E   C3 47 02     NOP_:     JP   NEXT   ; hardwire white space to always go to NEXT (important for arrays)
0491                NUM_:        
0491   C3 7D 05               JP   number   
0494                OVER_:       
0494   E1                     POP   HL   ; Duplicate 2nd element of the stack
0495   D1                     POP   DE   
0496   D5                     PUSH   DE   
0497   E5                     PUSH   HL   
0498   D5                     PUSH   DE   ; And push it to top of stack
0499   FD E9                  JP   (IY)   
049B                RET_:        
049B   CD E7 07               CALL   rpop   ; Restore Instruction pointer
049E   44 4D                  LD   BC,HL   
04A0   FD E9                  JP   (IY)   
04A2                STORE_:      ; Store the value at the address placed on the top of the stack
04A2   E1                     POP   HL   ; 10t
04A3   D1                     POP   DE   ; 10t
04A4   73                     LD   (HL),E   ; 7t
04A5   23                     INC   HL   ; 6t
04A6   72                     LD   (HL),D   ; 7t
04A7   FD E9                  JP   (IY)   ; 8t
04A9                             ; 48t
04A9                             ; $ swap                    ; a b -- b a Swap the top 2 elements of the stack
04A9                SWAP_:       
04A9   E1                     POP   HL   
04AA   E3                     EX   (SP),HL   
04AB   E5                     PUSH   HL   
04AC   FD E9                  JP   (IY)   
04AE                             ;  Left shift { is multply by 2		
04AE                SHL_:        
04AE   E1                     POP   HL   ; Duplicate the top member of the stack
04AF   29                     ADD   HL,HL   
04B0   E5                     PUSH   HL   ; shift left fallthrough into add_
04B1   FD E9                  JP   (IY)   ; 8t
04B3                             ;  Right shift } is a divide by 2		
04B3                             ; 
04B3                SHR_:        
04B3   E1                     POP   HL   ; Get the top member of the stack
04B4                SHR1:        
04B4   CB 3C                  SRL   H   
04B6   CB 1D                  RR   L   
04B8   E5                     PUSH   HL   
04B9   FD E9                  JP   (IY)   ; 8t
04BB   21 00 00     NEG_:     LD   HL,0   ; NEGate the value on top of stack (2's complement)
04BE   D1                     POP   DE   ; 10t
04BF   18 02                  JR   SUB_2   ; use the SUBtract routine
04C1                SUB_:        ; Subtract the value 2nd on stack from top of stack
04C1   D1                     POP   DE   ; 10t
04C2   E1           SUB_1:    POP   HL   ; 10t  Entry point for INVert
04C3   A7           SUB_2:    AND   A   ;  4t  Entry point for NEGate
04C4   ED 52                  SBC   HL,DE   ; 15t
04C6   E5                     PUSH   HL   ; 11t
04C7   FD E9                  JP   (IY)   ; 8t
04C9                             ; 58t
04C9   E1           EQ_:      POP   HL   
04CA   D1                     POP   DE   
04CB   A7                     AND   A   ; reset the carry flag
04CC   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
04CE   28 19                  JR   Z,equal   
04D0   21 00 00               LD   HL,0   
04D3   18 15                  JR   less   ; HL = 1
04D5                GETREF_:      
04D5   C3 0E 05               JP   getRef   
04D8   D1           GT_:      POP   DE   
04D9   E1                     POP   HL   
04DA   18 02                  JR   cmp_   
04DC   E1           LT_:      POP   HL   
04DD   D1                     POP   DE   
04DE   A7           CMP_:     AND   A   ; reset the carry flag
04DF   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
04E1   28 07                  JR   Z,less   ; equality returns 0  KB 25/11/21
04E3   21 00 00               LD   HL,0   
04E6   FA EA 04               JP   M,less   
04E9   2C           EQUAL:    INC   L   ; HL = 1
04EA                LESS:        
04EA   E5                     PUSH   HL   
04EB   FD E9                  JP   (IY)   
04ED                VAR_:        
04ED   0A                     LD   A,(BC)   
04EE   D6 21                  SUB   "a" - ((VARS - mintVars)/2)   
04F0   87                     ADD   A,A   
04F1   6F                     LD   L,A   
04F2   26 0A                  LD   H,msb(mintVars)   
04F4   E5                     PUSH   HL   
04F5   FD E9                  JP   (IY)   
04F7                DIV_:        
04F7   18 44                  JR   div   
04F9                MUL_:        
04F9   C3 21 05               JP   mul   
04FC                AGAIN_:      
04FC   C3 CD 05               JP   again   
04FF                STR_:        
04FF                STR:         ;= 15
04FF   03                     INC   BC   
0500                NEXTCHAR:      
0500   0A                     LD   A,(BC)   
0501   03                     INC   BC   
0502   FE 60                  CP   "`"   ; ` is the string terminator
0504   28 05                  JR   Z,str2   
0506   CD 85 00               CALL   putchar   
0509   18 F5                  JR   nextchar   
050B                STR2:        
050B   0B                     DEC   BC   
050C   FD E9                  JP   (IY)   
050E                             ;*******************************************************************
050E                             ; Page 5 primitive routines
050E                             ;*******************************************************************
050E                             ;falls through
050E                GETREF:      ;= 8
050E   03                     INC   BC   
050F   0A                     LD   A,(BC)   
0510   CD 79 07               CALL   lookupDef   
0513   C3 85 04               JP   fetch1   
0516                ALT:         ;= 11
0516   03                     INC   BC   
0517   0A                     LD   A,(BC)   
0518   21 80 03               LD   HL,altCodes   
051B   85                     ADD   A,L   
051C   6F                     LD   L,A   
051D   6E                     LD   L,(HL)   ; 7t    get low jump address
051E   26 06                  LD   H,msb(page6)   ; Load H with the 5th page address
0520   E9                     JP   (HL)   ; 4t    Jump to routine
0521                             ; ********************************************************************
0521                             ; 16-bit multiply
0521                MUL:         ;=19
0521   D1                     POP   DE   ; get first value
0522   E1                     POP   HL   
0523   C5                     PUSH   BC   ; Preserve the IP
0524   44                     LD   B,H   ; BC = 2nd value
0525   4D                     LD   C,L   
0526   21 00 00               LD   HL,0   
0529   3E 10                  LD   A,16   
052B                MUL_LOOP_1:      
052B   29                     ADD   HL,HL   
052C   CB 13                  RL   E   
052E   CB 12                  RL   D   
0530   30 04                  JR   NC,$+6   
0532   09                     ADD   HL,BC   
0533   30 01                  JR   NC,$+3   
0535   13                     INC   DE   
0536   3D                     DEC   A   
0537   20 F2                  JR   NZ,Mul_Loop_1   
0539                             ; 
0539   C1                     POP   BC   ; Restore the IP
053A   E5                     PUSH   HL   ; Put the product on the stack - stack bug fixed 2/12/21
053B   FD E9                  JP   (IY)   
053D                             ; ********************************************************************
053D                             ; 16-bit division subroutine.
053D                             ; 
053D                             ; BC: divisor, DE: dividend, HL: remainder
053D                             ; *********************************************************************
053D                             ; This divides DE by BC, storing the result in DE, remainder in HL
053D                             ; *********************************************************************
053D                             ; 1382 cycles
053D                             ; 35 bytes (reduced from 48)
053D                             ; 
053D                DIV:         ;=24
053D   D1                     POP   DE   ; get first value
053E   E1                     POP   HL   ; get 2nd value
053F   C5                     PUSH   BC   ; Preserve the IP
0540   44                     LD   B,H   ; BC = 2nd value
0541   4D                     LD   C,L   
0542                             ; 
0542   21 00 00               LD   hl,0   ; Zero the remainder
0545   3E 10                  LD   a,16   ; Loop counter
0547                DIV_LOOP:      ;shift the bits from BC (numerator) into HL (accumulator)
0547   CB 21                  SLA   c   
0549   CB 10                  RL   b   
054B   ED 6A                  ADC   hl,hl   
054D   ED 52                  SBC   hl,de   ;Check if remainder >= denominator (HL>=DE)
054F   38 03                  JR   c,div_adjust   
0551   0C                     INC   c   
0552   18 01                  JR   div_done   
0554                DIV_ADJUST:      ; remainder is not >= denominator, so we have to add DE back to HL
0554   19                     ADD   hl,de   
0555                DIV_DONE:      
0555   3D                     DEC   a   
0556   20 EF                  JR   nz,div_loop   
0558   50                     LD   D,B   ; Result from BC to DE
0559   59                     LD   E,C   
055A                DIV_END:      
055A   C1                     POP   BC   ; Restore the IP
055B   D5                     PUSH   DE   ; Push Result
055C   E5                     PUSH   HL   ; Push remainder
055D   FD E9                  JP   (IY)   
055F                             ; **************************************************************************
055F                             ; def is used to create a colon definition
055F                             ; When a colon is detected, the next character (usually uppercase alpha)
055F                             ; is looked up in the vector table to get its associated code field address
055F                             ; This CFA is updated to point to the character after uppercase alpha
055F                             ; The remainder of the characters are then skipped until after a semicolon
055F                             ; is found.
055F                             ; ***************************************************************************
055F                             ;= 31
055F                DEF:         ; Create a colon definition
055F   03                     INC   BC   
0560   0A                     LD   A,(BC)   ; Get the next character
0561   03                     INC   BC   
0562   CD 79 07               CALL   lookupDef   
0565   ED 5B 0E 0A            LD   DE,(vHeapPtr)   ; start of defintion
0569   73                     LD   (HL),E   ; Save low byte of address in CFA
056A   23                     INC   HL   
056B   72                     LD   (HL),D   ; Save high byte of address in CFA+1
056C                DEF1:        ; Skip to end of definition
056C   0A                     LD   A,(BC)   ; Get the next character
056D   03                     INC   BC   ; Point to next character
056E   12                     LD   (DE),A   
056F   13                     INC   DE   
0570   FE 3B                  CP   ";"   ; Is it a semicolon
0572   28 02                  JR   Z,def2   ; end the definition
0574   18 F6                  JR   def1   ; get the next element
0576                DEF2:        
0576   0B                     DEC   BC   
0577                DEF3:        
0577   ED 53 0E 0A            LD   (vHeapPtr),DE   ; bump heap ptr to after definiton
057B   FD E9                  JP   (IY)   
057D                             ; ********************************************************************************
057D                             ; Number Handling Routine - converts numeric ascii string to a 16-bit number in HL
057D                             ; Read the first character.
057D                             ;			
057D                             ; Number characters ($30 to $39) are converted to digits by subtracting $30
057D                             ; and then added into the L register. (HL forms a 16-bit accumulator)
057D                             ; Fetch the next character, if it is a number, multiply contents of HL by 10
057D                             ; and then add in the next digit. Repeat this until a non-number character is
057D                             ; detected. Add in the final digit so that HL contains the converted number.
057D                             ; Push HL onto the stack and proceed to the dispatch routine.
057D                             ; ********************************************************************************
057D                NUMBER:      ;= 23
057D   21 00 00               LD   HL,$0000   ; 10t Clear HL to accept the number
0580   0A                     LD   A,(BC)   ; 7t  Get the character which is a numeral
0581                NUMBER1:      ; corrected KB 24/11/21
0581   D6 30                  SUB   $30   ; 7t    Form decimal digit
0583   85                     ADD   A,L   ; 4t    Add into bottom of HL
0584   6F                     LD   L,A   ; 4t
0585   3E 00                  LD   A,00   ; 4t    Clear A
0587   8C                     ADC   A,H   ; Add with carry H-reg
0588   67                     LD   H,A   ; Put result in H-reg
0589   03                     INC   BC   ; 6t    Increment IP
058A   0A                     LD   A,(BC)   ; 7t    and get the next character
058B   FE 30                  CP   $30   ; 7t    Less than $30
058D   38 0C                  JR   C,endnum   ; 7/12t Not a number / end of number
058F   FE 3A                  CP   $3A   ; 7t    Greater or equal to $3A
0591   30 08                  JR   NC,endnum   ; 7/12t Not a number / end of number
0593                TIMES10:      ; Multiply digit(s) in HL by 10
0593   29                     ADD   HL,HL   ; 11t    2X
0594   5D                     LD   E,L   ;  4t    LD DE,HL
0595   54                     LD   D,H   ;  4t
0596   29                     ADD   HL,HL   ; 11t    4X
0597   29                     ADD   HL,HL   ; 11t    8X
0598   19                     ADD   HL,DE   ; 11t    2X  + 8X  = 10X
0599                             ; 52t cycles
0599   18 E6                  JR   number1   
059B                ENDNUM:      
059B   0B                     DEC   BC   
059C   E5                     PUSH   HL   ; 11t   Put the number on the stack
059D   FD E9                  JP   (IY)   ; and process the next character
059F                             ; *************************************
059F                             ; Loop Handling Code
059F                             ; *************************************
059F                             ;= 23
059F                BEGIN:       ; Left parentesis begins a loop
059F   E1                     POP   HL   
05A0   7D                     LD   A,L   ; zero?
05A1   B4                     OR   H   
05A2   28 1C                  JR   Z,begin1   
05A4   2B                     DEC   HL   
05A5   11 FA FF               LD   DE,-6   
05A8   DD 19                  ADD   IX,DE   
05AA   DD 36 00 00            LD   (IX+0),0   ; loop var
05AE   DD 36 01 00            LD   (IX+1),0   
05B2   DD 75 02               LD   (IX+2),L   ; loop limit
05B5   DD 74 03               LD   (IX+3),H   
05B8   DD 71 04               LD   (IX+4),C   ; loop address
05BB   DD 70 05               LD   (IX+5),B   
05BE   FD E9                  JP   (IY)   
05C0                BEGIN1:      
05C0   1E 01                  LD   E,1   
05C2                BEGIN2:      
05C2   03                     INC   BC   
05C3   0A                     LD   A,(BC)   
05C4   CD 63 02               CALL   nesting   
05C7   AF                     XOR   A   
05C8   B3                     OR   E   
05C9   20 F7                  JR   NZ,begin2   
05CB                BEGIN3:      
05CB   FD E9                  JP   (IY)   
05CD                AGAIN:       
05CD   DD 5E 00               LD   E,(IX+0)   ; peek loop var
05D0   DD 56 01               LD   D,(IX+1)   
05D3   7A                     LD   A,D   ; check if IFTEMode
05D4   A3                     AND   E   
05D5   3C                     INC   A   
05D6   20 07                  JR   NZ,again1   
05D8   13                     INC   DE   
05D9   D5                     PUSH   DE   ; push FALSE condition
05DA   11 02 00               LD   DE,2   
05DD   18 1D                  JR   again3   ; drop IFTEMode
05DF                AGAIN1:      
05DF   DD 6E 02               LD   L,(IX+2)   ; peek loop limit
05E2   DD 66 03               LD   H,(IX+3)   
05E5   B7                     OR   A   
05E6   ED 52                  SBC   HL,DE   
05E8   28 0F                  JR   Z,again2   
05EA   13                     INC   DE   
05EB   DD 73 00               LD   (IX+0),E   ; poke loop var
05EE   DD 72 01               LD   (IX+1),D   
05F1   DD 4E 04               LD   C,(IX+4)   ; peek loop address
05F4   DD 46 05               LD   B,(IX+5)   
05F7   FD E9                  JP   (IY)   
05F9                AGAIN2:      
05F9   11 06 00               LD   DE,6   ; drop loop frame
05FC                AGAIN3:      
05FC   DD 19                  ADD   IX,DE   
05FE   FD E9                  JP   (IY)   
0600                             ; **************************************************************************
0600                             ; Page 6 Alt primitives
0600                             ; **************************************************************************
0600                          ALIGN   $100   
0600                PAGE6:       
0600                CARRDEF_:      ; define a byte array
0600   3E 01                  LD   A,TRUE   
0602   C3 2D 04               JP   arrDef1   
0605                CFETCH_:      
0605   E1                     POP   HL   ; 10t
0606   16 00                  LD   D,0   ; 7t
0608   5E                     LD   E,(HL)   ; 7t
0609   D5                     PUSH   DE   ; 11t
060A                ANOP_:       
060A   FD E9                  JP   (IY)   ; 8t
060C                             ; 49t
060C                CHARCODE_:      
060C   03                     INC   BC   
060D   0A                     LD   A,(BC)   
060E   26 00                  LD   H,0   
0610   6F                     LD   L,A   
0611   E5                     PUSH   HL   
0612   FD E9                  JP   (IY)   
0614                COMMENT_:      
0614   03                     INC   BC   ; point to next char
0615   0A                     LD   A,(BC)   
0616   FE 0D                  CP   "\r"   ; terminate at cr
0618   20 FA                  JR   NZ,comment_   
061A                             ; CP "\n"             ; terminate at lf
061A                             ; JR NZ,comment_
061A   0B                     DEC   BC   
061B   FD E9                  JP   (IY)   
061D                CSTORE_:      
061D   E1                     POP   HL   ; 10t
061E   D1                     POP   DE   ; 10t
061F   73                     LD   (HL),E   ; 7t
0620   FD E9                  JP   (IY)   ; 8t
0622                             ; 48t
0622                DEPTH_:      
0622   21 00 00               LD   HL,0   
0625   39                     ADD   HL,SP   
0626   EB                     EX   DE,HL   
0627   21 80 08               LD   HL,DSTACK   
062A   B7                     OR   A   
062B   ED 52                  SBC   HL,DE   
062D   C3 B4 04               JP   shr1   
0630                EMIT_:       
0630   E1                     POP   HL   
0631   7D                     LD   A,L   
0632   CD 85 00               CALL   putchar   
0635   FD E9                  JP   (IY)   
0637                IFTE_:       
0637   D1                     POP   DE   
0638   7B                     LD   A,E   
0639   B2                     OR   D   
063A   20 05                  JR   NZ,ifte1   
063C   13                     INC   DE   
063D   D5                     PUSH   DE   ; push TRUE on stack for else clause
063E   C3 C0 05               JP   begin1   ; skip to closing ) works with \) too
0641                IFTE1:       
0641   21 FF FF               LD   HL,-1   ; push -1 on return stack to indicate IFTEMode
0644   CD DC 07               CALL   rpush   
0647   FD E9                  JP   (IY)   
0649                EXEC_:       
0649   CD 4E 06               CALL   exec1   
064C   FD E9                  JP   (IY)   
064E                EXEC1:       
064E   E1                     POP   HL   
064F   E3                     EX   (SP),HL   
0650   E9                     JP   (HL)   
0651                GO_:         
0651   60 69                  LD   HL,BC   
0653   CD DC 07               CALL   rpush   ; save Instruction Pointer
0656   C1                     POP   BC   
0657   0B                     DEC   BC   
0658   FD E9                  JP   (IY)   ; Execute code from User def
065A                ENDGROUP_:      
065A   CD E7 07               CALL   rpop   
065D   22 06 0A               LD   (vDEFS),HL   
0660   FD E9                  JP   (IY)   
0662                GROUP_:      
0662   D1                     POP   DE   
0663   53                     LD   D,E   
0664   1E 00                  LD   E,0   
0666   CB 3A                  SRL   D   
0668   CB 1B                  RR   E   
066A   CB 3A                  SRL   D   
066C   CB 1B                  RR   E   
066E   2A 06 0A               LD   HL,(vDEFS)   
0671   CD DC 07               CALL   rpush   
0674   21 C0 0A               LD   HL,DEFS   
0677   19                     ADD   HL,DE   
0678   22 06 0A               LD   (vDEFS),HL   
067B   FD E9                  JP   (IY)   ; Execute code from User def
067D                SYSVAR_:      
067D   0A                     LD   A,(BC)   
067E   D6 61                  SUB   "a" - ((sysVars - mintVars)/2)   
0680   87                     ADD   A,A   
0681   6F                     LD   L,A   
0682   26 0A                  LD   H,msb(mintVars)   
0684   E5                     PUSH   HL   
0685   FD E9                  JP   (IY)   ; Execute code from User def
0687                I_:          
0687   DD E5                  PUSH   IX   
0689   FD E9                  JP   (IY)   
068B                             ; \+    a b -- [b]+a            ; increment variable at b by a
068B                INCR_:       
068B   E1                     POP   HL   
068C   D1                     POP   DE   
068D   7B                     LD   A,E   
068E   86                     ADD   A,(HL)   
068F   77                     LD   (HL),A   
0690   23                     INC   HL   
0691   7A                     LD   A,D   
0692   8E                     ADC   A,(HL)   
0693   77                     LD   (HL),A   
0694   FD E9                  JP   (IY)   
0696                INPORT_:      
0696   E1                     POP   HL   
0697   79                     LD   A,C   
0698   4D                     LD   C,L   
0699   ED 68                  IN   L,(C)   
069B   26 00                  LD   H,0   
069D   4F                     LD   C,A   
069E   E5                     PUSH   HL   
069F   FD E9                  JP   (IY)   
06A1                J_:          
06A1   DD E5                  PUSH   IX   
06A3   E1                     POP   HL   
06A4   11 06 00               LD   DE,6   
06A7   19                     ADD   HL,DE   
06A8   E5                     PUSH   HL   
06A9   FD E9                  JP   (IY)   
06AB                KEY_:        
06AB   CD 81 00               CALL   getchar   
06AE   6F                     LD   L,A   
06AF   26 00                  LD   H,0   
06B1   E5                     PUSH   HL   
06B2   FD E9                  JP   (IY)   
06B4                NEWLN_:      
06B4   CD 69 07               CALL   crlf   
06B7   FD E9                  JP   (IY)   
06B9                OUTPORT_:      
06B9   E1                     POP   HL   
06BA   59                     LD   E,C   
06BB   4D                     LD   C,L   
06BC   E1                     POP   HL   
06BD   ED 69                  OUT   (C),L   
06BF   4B                     LD   C,E   
06C0   FD E9                  JP   (IY)   
06C2                ROT_:        ; a b c -- b c a
06C2   D1                     POP   DE   ; a b                   de = c
06C3   E1                     POP   HL   ; a                     hl = b
06C4   E3                     EX   (SP),HL   ; b                     hl = a
06C5   D5                     PUSH   DE   ; b c
06C6   E5                     PUSH   HL   ; b c a
06C7   FD E9                  JP   (IY)   
06C9                BREAK_:      
06C9   E1                     POP   HL   
06CA   7D                     LD   A,L   ; zero?
06CB   B4                     OR   H   
06CC   20 02                  JR   NZ,break1   
06CE   FD E9                  JP   (IY)   
06D0                BREAK1:      
06D0   11 06 00               LD   DE,6   ; drop loop frame
06D3   DD 19                  ADD   IX,DE   
06D5   C3 C0 05               JP   begin1   ; skip to end of loop
06D8                PRINTSTK_:      
06D8   18 36                  JR   printStk   
06DA                EDITDEF_:      
06DA                             ; **************************************************************************
06DA                             ; Page 6 primitive routines
06DA                             ; **************************************************************************
06DA                             ; falls through
06DA                             ; **************************************************************************
06DA                             ; copy definition to text input buffer
06DA                             ; update TIBPtr
06DA                             ; **************************************************************************
06DA                EDITDEF:      ; lookup up def based on number
06DA   3E 41                  LD   A,"A"   
06DC   D1                     POP   DE   
06DD   83                     ADD   A,E   
06DE   08                     EX   AF,AF'   
06DF   2A 06 0A               LD   HL,(vDEFS)   
06E2   19                     ADD   HL,DE   
06E3   19                     ADD   HL,DE   
06E4   5E                     LD   E,(HL)   
06E5   23                     INC   HL   
06E6   56                     LD   D,(HL)   
06E7   EB                     EX   DE,HL   
06E8   7E                     LD   A,(HL)   
06E9   FE 3B                  CP   ";"   
06EB   11 00 09               LD   DE,TIB   
06EE   28 14                  JR   Z,editDef3   
06F0   3E 3A                  LD   A,":"   
06F2   CD F2 07               CALL   writeChar   
06F5   08                     EX   AF,AF'   
06F6   CD F2 07               CALL   writeChar   
06F9   18 01                  JR   editDef2   
06FB                EDITDEF1:      
06FB   23                     INC   HL   
06FC                EDITDEF2:      
06FC   7E                     LD   A,(HL)   
06FD   CD F2 07               CALL   writeChar   
0700   FE 3B                  CP   ";"   
0702   20 F7                  JR   NZ,editDef1   
0704                EDITDEF3:      
0704   21 00 09               LD   HL,TIB   
0707   EB                     EX   DE,HL   
0708   B7                     OR   A   
0709   ED 52                  SBC   HL,DE   
070B   22 04 0A               LD   (vTIBPtr),HL   
070E   FD E9                  JP   (IY)   
0710                PRINTSTK:      ;= 40
0710   CD 70 07               CALL   ENTER   
0713   5C 61 40 32 2D 5C 44 31 2D 28 22 40 5C 62 40 5C 28 2C 29 28 2E 29 32 2D 29 27 00 .CSTR   "\\a@2-\\D1-(",$22,"@\\b@\\(,)(.)2-)'"   
072E   FD E9                  JP   (IY)   
0730                             ;*******************************************************************
0730                             ; Page 5 primitive routines continued
0730                             ;*******************************************************************
0730                ARREND:      ;= 27
0730   CD E7 07               CALL   rpop   ; DE = start of array
0733   E5                     PUSH   HL   
0734   EB                     EX   DE,HL   
0735   2A 0E 0A               LD   HL,(vHeapPtr)   ; HL = heap ptr
0738   B7                     OR   A   
0739   ED 52                  SBC   HL,DE   ; bytes on heap
073B   3A 36 0A               LD   A,(vByteMode)   
073E   B7                     OR   A   
073F   20 04                  JR   NZ,arrEnd2   
0741   CB 3C                  SRL   H   ; BC = m words
0743   CB 1D                  RR   L   
0745                ARREND2:      
0745   E5                     PUSH   HL   
0746   FD 21 47 02            LD   IY,NEXT   
074A   FD E9                  JP   (IY)   ; hardwired to NEXT
074C                HEX:         ;= 26
074C   21 00 00               LD   HL,0   ; 10t Clear HL to accept the number
074F                HEX1:        
074F   03                     INC   BC   
0750   0A                     LD   A,(BC)   ; 7t  Get the character which is a numeral
0751   CB 77                  BIT   6,A   ; 7t    is it uppercase alpha?
0753   28 02                  JR   Z,hex2   ; no a decimal
0755   D6 07                  SUB   7   ; sub 7  to make $A - $F
0757                HEX2:        
0757   D6 30                  SUB   $30   ; 7t    Form decimal digit
0759   DA 9B 05               JP   C,endnum   
075C   FE 10                  CP   $0F+1   
075E   D2 9B 05               JP   NC,endnum   
0761   29                     ADD   HL,HL   ; 11t    2X ; Multiply digit(s) in HL by 16
0762   29                     ADD   HL,HL   ; 11t    4X
0763   29                     ADD   HL,HL   ; 11t    8X
0764   29                     ADD   HL,HL   ; 11t   16X
0765   85                     ADD   A,L   ; 4t    Add into bottom of HL
0766   6F                     LD   L,A   ; 4t
0767   18 E6                  JR   hex1   
0769                             ;*******************************************************************
0769                             ; Subroutines
0769                             ;*******************************************************************
0769                CRLF:        ;=7
0769   CD 8B 07               CALL   printStr   
076C   0D 0A 00               .CSTR   "\r\n"   
076F   C9                     RET      
0770                ENTER:       ; 9
0770   60 69                  LD   HL,BC   
0772   CD DC 07               CALL   rpush   ; save Instruction Pointer
0775   C1                     POP   BC   
0776   0B                     DEC   BC   
0777   FD E9                  JP   (IY)   ; Execute code from User def
0779                LOOKUPDEF:      ;=20
0779   D6 41                  SUB   "A"   
077B   32 08 0A               LD   (vEdited),A   
077E   18 02                  JR   lookupDef2   
0780                LOOKUPDEF1:      
0780   D6 41                  SUB   "A"   
0782                LOOKUPDEF2:      
0782   87                     ADD   A,A   
0783   5F                     LD   E,A   
0784   16 00                  LD   D,0   
0786   2A 06 0A               LD   HL,(vDEFS)   
0789   19                     ADD   HL,DE   
078A   C9                     RET      
078B                PRINTSTR:      ;=14
078B   E3                     EX   (SP),HL   
078C   18 04                  JR   printStr2   
078E                PRINTSTR1:      
078E   CD 85 00               CALL   putchar   
0791   23                     INC   HL   
0792                PRINTSTR2:      
0792   7E                     LD   A,(HL)   
0793   B7                     OR   A   
0794   20 F8                  JR   NZ,printStr1   
0796   23                     INC   HL   
0797   E3                     EX   (SP),HL   
0798   C9                     RET      
0799                PRINTDEC:      
0799                             ;Number in hl to decimal ASCII
0799                             ;inputs:	hl = number to ASCII
0799                             ;example: hl=300 outputs "00300"
0799                             ;destroys: af, de, hl
0799                DISPHL:      ;= 36
0799   11 F0 D8               LD   de,-10000   
079C   CD B2 07               CALL   Num1   
079F   11 18 FC               LD   de,-1000   
07A2   CD B2 07               CALL   Num1   
07A5   11 9C FF               LD   de,-100   
07A8   CD B2 07               CALL   Num1   
07AB   1E F6                  LD   e,-10   
07AD   CD B2 07               CALL   Num1   
07B0   1E FF                  LD   e,-1   
07B2                NUM1:        
07B2   3E 2F                  LD   a,"0"-1   
07B4                NUM2:        
07B4   3C                     INC   a   
07B5   19                     ADD   hl,de   
07B6   38 FC                  JR   c,Num2   
07B8   ED 52                  SBC   hl,de   
07BA   C3 85 00               JP   putchar   
07BD                             ; Print an 8-bit HEX number  - shortened KB 25/11/21
07BD                             ; A: Number to print
07BD                PRINT_HEX8:      ;= 20
07BD   4F                     LD   C,A   
07BE   1F                     RRA      
07BF   1F                     RRA      
07C0   1F                     RRA      
07C1   1F                     RRA      
07C2   CD C6 07               CALL   conv   
07C5   79                     LD   A,C   
07C6                CONV:        
07C6   E6 0F                  AND   0x0F   
07C8   C6 90                  ADD   A,0x90   
07CA   27                     DAA      
07CB   CE 40                  ADC   A,0x40   
07CD   27                     DAA      
07CE   C3 85 00               JP   putchar   
07D1                PRINTHEX:      ;= 11
07D1                             ; Display HL as a 16-bit number in hex.
07D1   C5                     PUSH   BC   ; preserve the IP
07D2   7C                     LD   A,H   
07D3   CD BD 07               CALL   Print_Hex8   
07D6   7D                     LD   A,L   
07D7   CD BD 07               CALL   Print_Hex8   
07DA   C1                     POP   BC   
07DB   C9                     RET      
07DC                RPUSH:       ;=11
07DC   DD 2B                  DEC   IX   
07DE   DD 74 00               LD   (IX+0),H   
07E1   DD 2B                  DEC   IX   
07E3   DD 75 00               LD   (IX+0),L   
07E6   C9                     RET      
07E7                RPOP:        ;=11
07E7   DD 6E 00               LD   L,(IX+0)   
07EA   DD 23                  INC   IX   
07EC   DD 66 00               LD   H,(IX+0)   
07EF   DD 23                  INC   IX   
07F1   C9                     RET      
07F2                WRITECHAR:      
07F2   12                     LD   (DE),A   
07F3   13                     INC   DE   
07F4                WRITECHAR1:      
07F4   C3 85 00               JP   putchar   
0800                          .ORG   RAMSTART   
0800                          DS   DSIZE   
0880                STACK:       
0880                DSTACK:      
0880                          DS   RSIZE   
0900                RSTACK:      
0900                TIB:      DS   TIBSIZE   
0A00                          ALIGN   $100   
0A00                MINTVARS:      
0A00                SYSVARS:      
0A00                VS0:      DS   2   ; a
0A02                VBASE16:   DS   2   ; b
0A04                VTIBPTR:   DS   2   ; c
0A06                VDEFS:    DS   2   ; d
0A08                VEDITED:   DS   2   ; e
0A0A                          DS   2   ; f
0A0C                          DS   2   ; g
0A0E                VHEAPPTR:   DS   2   ; h
0A10                          DS   2   ; i
0A12                          DS   2   ; j
0A14                          DS   2   ; k
0A16                          DS   2   ; l
0A18                          DS   2   ; m
0A1A                          DS   2   ; n
0A1C                          DS   2   ; o
0A1E                          DS   2   ; p
0A20                          DS   2   ; q
0A22                          DS   2   ; r
0A24                          DS   2   ; s
0A26                          DS   2   ; t
0A28                          DS   2   ; u
0A2A                          DS   2   ; v
0A2C                          DS   2   ; w
0A2E                          DS   2   ; x
0A30                          DS   2   ; y
0A32                          DS   2   ; z
0A34                          DS   2   ; 
0A36                VBYTEMODE:   DS   2   ; 
0A38                          DS   $30   
0A68                TBPTR:    DS   2   ; reserved for tests
0A6A                RST08:    DS   2   
0A6C                RST10:    DS   2   
0A6E                RST18:    DS   2   
0A70                RST20:    DS   2   
0A72                RST28:    DS   2   
0A74                RST30:    DS   2   ; 
0A76                BAUD:     DS   2   ; 
0A78                INTVEC:   DS   2   ; 
0A7A                NMIVEC:   DS   2   ; 
0A7C                GETCVEC:   DS   2   ; 
0A7E                PUTCVEC:   DS   2   ; 
0A80                             ; ****************************************************************
0A80                             ; VARS Table - holds 26 16-bit user variables
0A80                             ; ****************************************************************
0A80                VARS:     DS   26 * 2   
0AB4                             ; ****************************************************************
0AB4                             ; DEFS Table - holds 26 addresses of user routines
0AB4                             ; ****************************************************************
0AB4                          ALIGN   $40   
0AB4                          .ORG   $-12   
0AB4                          DS   12   ; vars for group 0
0AC0                DEFS:     DS   GRPSIZE * NUMGRPS   
0C00                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 26 IN MINT.asm
RAMSTART:           0800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 113 IN MINT.asm
                    > USED AT LINE 1179 IN MINT.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 128 IN MINT.asm
                    > USED AT LINE 778 IN MINT.asm
                    > USED AT LINE 1083 IN MINT.asm
                    > USED AT LINE 1347 IN MINT.asm
                    > USED AT LINE 1382 IN MINT.asm
                    > USED AT LINE 1400 IN MINT.asm
                    > USED AT LINE 1431 IN MINT.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 13 IN MINT.asm
                    > USED AT LINE 3 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 14 IN MINT.asm
                    > USED AT LINE 7 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 15 IN MINT.asm
                    > USED AT LINE 10 IN ram.asm
TRUE:               0001 DEFINED AT LINE 16 IN MINT.asm
                    > USED AT LINE 1036 IN MINT.asm
FALSE:              0000 DEFINED AT LINE 17 IN MINT.asm
                    > USED AT LINE 41 IN MINT.asm
                    > USED AT LINE 588 IN MINT.asm
NUMGRPS:            0005 DEFINED AT LINE 19 IN MINT.asm
                    > USED AT LINE 58 IN MINT.asm
                    > USED AT LINE 70 IN ram.asm
GRPSIZE:            0040 DEFINED AT LINE 20 IN MINT.asm
                    > USED AT LINE 58 IN MINT.asm
                    > USED AT LINE 70 IN ram.asm
START:              0180 DEFINED AT LINE 28 IN MINT.asm
                    > USED AT LINE 6
MINT:               0180 DEFINED AT LINE 29 IN MINT.asm
ISYSVARS:           0197 DEFINED AT LINE 39 IN MINT.asm
                    > USED AT LINE 52 IN MINT.asm
INITIALIZE:         01A7 DEFINED AT LINE 49 IN MINT.asm
                    > USED AT LINE 31 IN MINT.asm
INIT1:              01BF DEFINED AT LINE 59 IN MINT.asm
                    > USED AT LINE 64 IN MINT.asm
MACRO:              01C8 DEFINED AT LINE 67 IN MINT.asm
                    > USED AT LINE 121 IN MINT.asm
INTERPRET:          01E1 DEFINED AT LINE 80 IN MINT.asm
                    > USED AT LINE 34 IN MINT.asm
                    > USED AT LINE 640 IN MINT.asm
INTERPRET1:         01EB DEFINED AT LINE 84 IN MINT.asm
INTERPRET2:         01F2 DEFINED AT LINE 88 IN MINT.asm
                    > USED AT LINE 78 IN MINT.asm
INTERPRET3:         01FA DEFINED AT LINE 95 IN MINT.asm
                    > USED AT LINE 104 IN MINT.asm
INTERPRET4:         0200 DEFINED AT LINE 101 IN MINT.asm
                    > USED AT LINE 93 IN MINT.asm
WAITCHAR:           0205 DEFINED AT LINE 112 IN MINT.asm
                    > USED AT LINE 130 IN MINT.asm
                    > USED AT LINE 144 IN MINT.asm
WAITCHAR1:          0218 DEFINED AT LINE 123 IN MINT.asm
                    > USED AT LINE 115 IN MINT.asm
WAITCHAR3:          0226 DEFINED AT LINE 132 IN MINT.asm
                    > USED AT LINE 119 IN MINT.asm
WAITCHAR4:          023C DEFINED AT LINE 148 IN MINT.asm
                    > USED AT LINE 117 IN MINT.asm
NEXT:               0247 DEFINED AT LINE 176 IN MINT.asm
                    > USED AT LINE 51 IN MINT.asm
                    > USED AT LINE 152 IN MINT.asm
                    > USED AT LINE 198 IN MINT.asm
                    > USED AT LINE 594 IN MINT.asm
                    > USED AT LINE 662 IN MINT.asm
                    > USED AT LINE 1288 IN MINT.asm
COMPNEXT:           0250 DEFINED AT LINE 186 IN MINT.asm
                    > USED AT LINE 590 IN MINT.asm
COMPNEXT1:          025E DEFINED AT LINE 196 IN MINT.asm
                    > USED AT LINE 193 IN MINT.asm
NESTING:            0263 DEFINED AT LINE 210 IN MINT.asm
                    > USED AT LINE 99 IN MINT.asm
                    > USED AT LINE 129 IN MINT.asm
                    > USED AT LINE 991 IN MINT.asm
NESTING1A:          026E DEFINED AT LINE 217 IN MINT.asm
                    > USED AT LINE 214 IN MINT.asm
NESTING1:           0271 DEFINED AT LINE 220 IN MINT.asm
                    > USED AT LINE 212 IN MINT.asm
NESTING2:           0280 DEFINED AT LINE 229 IN MINT.asm
                    > USED AT LINE 224 IN MINT.asm
                    > USED AT LINE 226 IN MINT.asm
NESTING3:           0282 DEFINED AT LINE 232 IN MINT.asm
                    > USED AT LINE 228 IN MINT.asm
NESTING4:           028D DEFINED AT LINE 239 IN MINT.asm
                    > USED AT LINE 234 IN MINT.asm
                    > USED AT LINE 236 IN MINT.asm
PROMPT:             028F DEFINED AT LINE 243 IN MINT.asm
MACROS:             0298 DEFINED AT LINE 252 IN MINT.asm
EMPTY_:             0298 DEFINED AT LINE 1 IN MINT.asm
BACKSP_:            0299 DEFINED AT LINE 4 IN MINT.asm
REEDIT_:            02AE DEFINED AT LINE 7 IN MINT.asm
EDIT_:              02B5 DEFINED AT LINE 10 IN MINT.asm
LIST_:              02C8 DEFINED AT LINE 13 IN MINT.asm
PRINTSTACK_:        02E4 DEFINED AT LINE 16 IN MINT.asm
TOGGLEBASE_:        02F5 DEFINED AT LINE 19 IN MINT.asm
OPCODES:            0300 DEFINED AT LINE 261 IN MINT.asm
CTRLCODES:          0380 DEFINED AT LINE 398 IN MINT.asm
                    > USED AT LINE 69 IN MINT.asm
ALTCODES:           0380 DEFINED AT LINE 399 IN MINT.asm
                    > USED AT LINE 799 IN MINT.asm
PAGE4:              0400 DEFINED AT LINE 534 IN MINT.asm
ALT_:               0400 DEFINED AT LINE 536 IN MINT.asm
AND_:               0403 DEFINED AT LINE 539 IN MINT.asm
AND1:               040A DEFINED AT LINE 547 IN MINT.asm
                    > USED AT LINE 561 IN MINT.asm
                    > USED AT LINE 572 IN MINT.asm
OR_:                040E DEFINED AT LINE 553 IN MINT.asm
XOR_:               0417 DEFINED AT LINE 563 IN MINT.asm
XOR1:               0418 DEFINED AT LINE 565 IN MINT.asm
                    > USED AT LINE 576 IN MINT.asm
INV_:               0420 DEFINED AT LINE 574 IN MINT.asm
ADD_:               0425 DEFINED AT LINE 578 IN MINT.asm
ARRDEF_:            042B DEFINED AT LINE 586 IN MINT.asm
ARRDEF:             042B DEFINED AT LINE 587 IN MINT.asm
ARRDEF1:            042D DEFINED AT LINE 589 IN MINT.asm
                    > USED AT LINE 1037 IN MINT.asm
ARREND_:            043D DEFINED AT LINE 596 IN MINT.asm
BEGIN_:             0440 DEFINED AT LINE 597 IN MINT.asm
CALL_:              0443 DEFINED AT LINE 598 IN MINT.asm
DEF_:               0452 DEFINED AT LINE 610 IN MINT.asm
HDOT_:              0455 DEFINED AT LINE 612 IN MINT.asm
DOT_:               045B DEFINED AT LINE 616 IN MINT.asm
DOT2:               045F DEFINED AT LINE 619 IN MINT.asm
                    > USED AT LINE 615 IN MINT.asm
DROP_:              0466 DEFINED AT LINE 624 IN MINT.asm
DUP_:               0469 DEFINED AT LINE 628 IN MINT.asm
ETX_:               046E DEFINED AT LINE 633 IN MINT.asm
ETX:                046E DEFINED AT LINE 634 IN MINT.asm
ETX1:               0477 DEFINED AT LINE 639 IN MINT.asm
                    > USED AT LINE 637 IN MINT.asm
EXIT_:              047A DEFINED AT LINE 643 IN MINT.asm
FETCH_:             0484 DEFINED AT LINE 651 IN MINT.asm
FETCH1:             0485 DEFINED AT LINE 653 IN MINT.asm
                    > USED AT LINE 794 IN MINT.asm
HEX_:               048B DEFINED AT LINE 660 IN MINT.asm
NOP_:               048E DEFINED AT LINE 662 IN MINT.asm
NUM_:               0491 DEFINED AT LINE 664 IN MINT.asm
OVER_:              0494 DEFINED AT LINE 667 IN MINT.asm
RET_:               049B DEFINED AT LINE 675 IN MINT.asm
STORE_:             04A2 DEFINED AT LINE 680 IN MINT.asm
SWAP_:              04A9 DEFINED AT LINE 689 IN MINT.asm
SHL_:               04AE DEFINED AT LINE 696 IN MINT.asm
SHR_:               04B3 DEFINED AT LINE 704 IN MINT.asm
SHR1:               04B4 DEFINED AT LINE 706 IN MINT.asm
                    > USED AT LINE 1078 IN MINT.asm
NEG_:               04BB DEFINED AT LINE 712 IN MINT.asm
SUB_:               04C1 DEFINED AT LINE 716 IN MINT.asm
SUB_1:              04C2 DEFINED AT LINE 719 IN MINT.asm
SUB_2:              04C3 DEFINED AT LINE 720 IN MINT.asm
                    > USED AT LINE 714 IN MINT.asm
EQ_:                04C9 DEFINED AT LINE 725 IN MINT.asm
GETREF_:            04D5 DEFINED AT LINE 733 IN MINT.asm
GT_:                04D8 DEFINED AT LINE 735 IN MINT.asm
LT_:                04DC DEFINED AT LINE 739 IN MINT.asm
CMP_:               04DE DEFINED AT LINE 741 IN MINT.asm
                    > USED AT LINE 737 IN MINT.asm
EQUAL:              04E9 DEFINED AT LINE 746 IN MINT.asm
                    > USED AT LINE 729 IN MINT.asm
LESS:               04EA DEFINED AT LINE 747 IN MINT.asm
                    > USED AT LINE 731 IN MINT.asm
                    > USED AT LINE 743 IN MINT.asm
                    > USED AT LINE 745 IN MINT.asm
VAR_:               04ED DEFINED AT LINE 751 IN MINT.asm
DIV_:               04F7 DEFINED AT LINE 762 IN MINT.asm
MUL_:               04F9 DEFINED AT LINE 764 IN MINT.asm
AGAIN_:             04FC DEFINED AT LINE 767 IN MINT.asm
STR_:               04FF DEFINED AT LINE 769 IN MINT.asm
STR:                04FF DEFINED AT LINE 770 IN MINT.asm
NEXTCHAR:           0500 DEFINED AT LINE 773 IN MINT.asm
                    > USED AT LINE 779 IN MINT.asm
STR2:               050B DEFINED AT LINE 781 IN MINT.asm
                    > USED AT LINE 777 IN MINT.asm
GETREF:             050E DEFINED AT LINE 790 IN MINT.asm
                    > USED AT LINE 734 IN MINT.asm
ALT:                0516 DEFINED AT LINE 796 IN MINT.asm
                    > USED AT LINE 537 IN MINT.asm
MUL:                0521 DEFINED AT LINE 808 IN MINT.asm
                    > USED AT LINE 765 IN MINT.asm
MUL_LOOP_1:         052B DEFINED AT LINE 817 IN MINT.asm
                    > USED AT LINE 826 IN MINT.asm
DIV:                053D DEFINED AT LINE 845 IN MINT.asm
                    > USED AT LINE 763 IN MINT.asm
DIV_LOOP:           0547 DEFINED AT LINE 855 IN MINT.asm
                    > USED AT LINE 870 IN MINT.asm
DIV_ADJUST:         0554 DEFINED AT LINE 865 IN MINT.asm
                    > USED AT LINE 861 IN MINT.asm
DIV_DONE:           0555 DEFINED AT LINE 868 IN MINT.asm
                    > USED AT LINE 863 IN MINT.asm
DIV_END:            055A DEFINED AT LINE 875 IN MINT.asm
DEF:                055F DEFINED AT LINE 892 IN MINT.asm
                    > USED AT LINE 610 IN MINT.asm
DEF1:               056C DEFINED AT LINE 901 IN MINT.asm
                    > USED AT LINE 908 IN MINT.asm
DEF2:               0576 DEFINED AT LINE 910 IN MINT.asm
                    > USED AT LINE 907 IN MINT.asm
DEF3:               0577 DEFINED AT LINE 912 IN MINT.asm
NUMBER:             057D DEFINED AT LINE 928 IN MINT.asm
                    > USED AT LINE 665 IN MINT.asm
NUMBER1:            0581 DEFINED AT LINE 932 IN MINT.asm
                    > USED AT LINE 957 IN MINT.asm
TIMES10:            0593 DEFINED AT LINE 948 IN MINT.asm
ENDNUM:             059B DEFINED AT LINE 959 IN MINT.asm
                    > USED AT LINE 944 IN MINT.asm
                    > USED AT LINE 946 IN MINT.asm
                    > USED AT LINE 1301 IN MINT.asm
                    > USED AT LINE 1303 IN MINT.asm
BEGIN:              059F DEFINED AT LINE 969 IN MINT.asm
                    > USED AT LINE 597 IN MINT.asm
BEGIN1:             05C0 DEFINED AT LINE 986 IN MINT.asm
                    > USED AT LINE 973 IN MINT.asm
                    > USED AT LINE 1093 IN MINT.asm
                    > USED AT LINE 1215 IN MINT.asm
BEGIN2:             05C2 DEFINED AT LINE 988 IN MINT.asm
                    > USED AT LINE 994 IN MINT.asm
BEGIN3:             05CB DEFINED AT LINE 995 IN MINT.asm
AGAIN:              05CD DEFINED AT LINE 998 IN MINT.asm
                    > USED AT LINE 768 IN MINT.asm
AGAIN1:             05DF DEFINED AT LINE 1011 IN MINT.asm
                    > USED AT LINE 1005 IN MINT.asm
AGAIN2:             05F9 DEFINED AT LINE 1023 IN MINT.asm
                    > USED AT LINE 1016 IN MINT.asm
AGAIN3:             05FC DEFINED AT LINE 1025 IN MINT.asm
                    > USED AT LINE 1009 IN MINT.asm
PAGE6:              0600 DEFINED AT LINE 1033 IN MINT.asm
CARRDEF_:           0600 DEFINED AT LINE 1035 IN MINT.asm
CFETCH_:            0605 DEFINED AT LINE 1039 IN MINT.asm
ANOP_:              060A DEFINED AT LINE 1044 IN MINT.asm
CHARCODE_:          060C DEFINED AT LINE 1047 IN MINT.asm
COMMENT_:           0614 DEFINED AT LINE 1055 IN MINT.asm
                    > USED AT LINE 1059 IN MINT.asm
CSTORE_:            061D DEFINED AT LINE 1065 IN MINT.asm
DEPTH_:             0622 DEFINED AT LINE 1071 IN MINT.asm
EMIT_:              0630 DEFINED AT LINE 1080 IN MINT.asm
IFTE_:              0637 DEFINED AT LINE 1086 IN MINT.asm
IFTE1:              0641 DEFINED AT LINE 1094 IN MINT.asm
                    > USED AT LINE 1090 IN MINT.asm
EXEC_:              0649 DEFINED AT LINE 1099 IN MINT.asm
EXEC1:              064E DEFINED AT LINE 1102 IN MINT.asm
                    > USED AT LINE 1100 IN MINT.asm
GO_:                0651 DEFINED AT LINE 1107 IN MINT.asm
ENDGROUP_:          065A DEFINED AT LINE 1114 IN MINT.asm
GROUP_:             0662 DEFINED AT LINE 1119 IN MINT.asm
SYSVAR_:            067D DEFINED AT LINE 1134 IN MINT.asm
I_:                 0687 DEFINED AT LINE 1143 IN MINT.asm
INCR_:              068B DEFINED AT LINE 1148 IN MINT.asm
INPORT_:            0696 DEFINED AT LINE 1160 IN MINT.asm
J_:                 06A1 DEFINED AT LINE 1170 IN MINT.asm
KEY_:               06AB DEFINED AT LINE 1178 IN MINT.asm
NEWLN_:             06B4 DEFINED AT LINE 1185 IN MINT.asm
OUTPORT_:           06B9 DEFINED AT LINE 1189 IN MINT.asm
ROT_:               06C2 DEFINED AT LINE 1198 IN MINT.asm
BREAK_:             06C9 DEFINED AT LINE 1206 IN MINT.asm
BREAK1:             06D0 DEFINED AT LINE 1212 IN MINT.asm
                    > USED AT LINE 1210 IN MINT.asm
PRINTSTK_:          06D8 DEFINED AT LINE 1217 IN MINT.asm
EDITDEF_:           06DA DEFINED AT LINE 1219 IN MINT.asm
EDITDEF:            06DA DEFINED AT LINE 1229 IN MINT.asm
EDITDEF1:           06FB DEFINED AT LINE 1250 IN MINT.asm
                    > USED AT LINE 1256 IN MINT.asm
EDITDEF2:           06FC DEFINED AT LINE 1252 IN MINT.asm
                    > USED AT LINE 1249 IN MINT.asm
EDITDEF3:           0704 DEFINED AT LINE 1257 IN MINT.asm
                    > USED AT LINE 1244 IN MINT.asm
PRINTSTK:           0710 DEFINED AT LINE 1265 IN MINT.asm
                    > USED AT LINE 1218 IN MINT.asm
ARREND:             0730 DEFINED AT LINE 1274 IN MINT.asm
                    > USED AT LINE 596 IN MINT.asm
ARREND2:            0745 DEFINED AT LINE 1286 IN MINT.asm
                    > USED AT LINE 1283 IN MINT.asm
HEX:                074C DEFINED AT LINE 1291 IN MINT.asm
                    > USED AT LINE 660 IN MINT.asm
HEX1:               074F DEFINED AT LINE 1293 IN MINT.asm
                    > USED AT LINE 1310 IN MINT.asm
HEX2:               0757 DEFINED AT LINE 1299 IN MINT.asm
                    > USED AT LINE 1297 IN MINT.asm
CRLF:               0769 DEFINED AT LINE 1316 IN MINT.asm
                    > USED AT LINE 141 IN MINT.asm
                    > USED AT LINE 1186 IN MINT.asm
ENTER:              0770 DEFINED AT LINE 1321 IN MINT.asm
                    > USED AT LINE 75 IN MINT.asm
                    > USED AT LINE 81 IN MINT.asm
                    > USED AT LINE 1266 IN MINT.asm
LOOKUPDEF:          0779 DEFINED AT LINE 1328 IN MINT.asm
                    > USED AT LINE 793 IN MINT.asm
                    > USED AT LINE 896 IN MINT.asm
LOOKUPDEF1:         0780 DEFINED AT LINE 1332 IN MINT.asm
                    > USED AT LINE 602 IN MINT.asm
LOOKUPDEF2:         0782 DEFINED AT LINE 1334 IN MINT.asm
                    > USED AT LINE 1331 IN MINT.asm
PRINTSTR:           078B DEFINED AT LINE 1342 IN MINT.asm
                    > USED AT LINE 32 IN MINT.asm
                    > USED AT LINE 244 IN MINT.asm
                    > USED AT LINE 1317 IN MINT.asm
PRINTSTR1:          078E DEFINED AT LINE 1346 IN MINT.asm
                    > USED AT LINE 1353 IN MINT.asm
PRINTSTR2:          0792 DEFINED AT LINE 1350 IN MINT.asm
                    > USED AT LINE 1344 IN MINT.asm
PRINTDEC:           0799 DEFINED AT LINE 1358 IN MINT.asm
                    > USED AT LINE 618 IN MINT.asm
DISPHL:             0799 DEFINED AT LINE 1365 IN MINT.asm
NUM1:               07B2 DEFINED AT LINE 1375 IN MINT.asm
                    > USED AT LINE 1367 IN MINT.asm
                    > USED AT LINE 1369 IN MINT.asm
                    > USED AT LINE 1371 IN MINT.asm
                    > USED AT LINE 1373 IN MINT.asm
NUM2:               07B4 DEFINED AT LINE 1377 IN MINT.asm
                    > USED AT LINE 1380 IN MINT.asm
PRINT_HEX8:         07BD DEFINED AT LINE 1386 IN MINT.asm
                    > USED AT LINE 1406 IN MINT.asm
                    > USED AT LINE 1408 IN MINT.asm
CONV:               07C6 DEFINED AT LINE 1394 IN MINT.asm
                    > USED AT LINE 1392 IN MINT.asm
PRINTHEX:           07D1 DEFINED AT LINE 1402 IN MINT.asm
                    > USED AT LINE 614 IN MINT.asm
RPUSH:              07DC DEFINED AT LINE 1412 IN MINT.asm
                    > USED AT LINE 593 IN MINT.asm
                    > USED AT LINE 600 IN MINT.asm
                    > USED AT LINE 1096 IN MINT.asm
                    > USED AT LINE 1109 IN MINT.asm
                    > USED AT LINE 1128 IN MINT.asm
                    > USED AT LINE 1323 IN MINT.asm
RPOP:               07E7 DEFINED AT LINE 1419 IN MINT.asm
                    > USED AT LINE 646 IN MINT.asm
                    > USED AT LINE 676 IN MINT.asm
                    > USED AT LINE 1115 IN MINT.asm
                    > USED AT LINE 1275 IN MINT.asm
WRITECHAR:          07F2 DEFINED AT LINE 1426 IN MINT.asm
                    > USED AT LINE 1246 IN MINT.asm
                    > USED AT LINE 1248 IN MINT.asm
                    > USED AT LINE 1254 IN MINT.asm
WRITECHAR1:         07F4 DEFINED AT LINE 1430 IN MINT.asm
                    > USED AT LINE 621 IN MINT.asm
STACK:              0880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
DSTACK:             0880 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 30 IN MINT.asm
                    > USED AT LINE 40 IN MINT.asm
                    > USED AT LINE 635 IN MINT.asm
                    > USED AT LINE 638 IN MINT.asm
                    > USED AT LINE 1075 IN MINT.asm
RSTACK:             0900 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 50 IN MINT.asm
TIB:                0900 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 92 IN MINT.asm
                    > USED AT LINE 124 IN MINT.asm
                    > USED AT LINE 133 IN MINT.asm
                    > USED AT LINE 150 IN MINT.asm
                    > USED AT LINE 1243 IN MINT.asm
                    > USED AT LINE 1258 IN MINT.asm
MINTVARS:           0A00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 754 IN MINT.asm
                    > USED AT LINE 1136 IN MINT.asm
SYSVARS:            0A00 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 53 IN MINT.asm
                    > USED AT LINE 1136 IN MINT.asm
VS0:                0A00 DEFINED AT LINE 16 IN ram.asm
VBASE16:            0A02 DEFINED AT LINE 17 IN ram.asm
VTIBPTR:            0A04 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 68 IN MINT.asm
                    > USED AT LINE 77 IN MINT.asm
                    > USED AT LINE 86 IN MINT.asm
                    > USED AT LINE 149 IN MINT.asm
                    > USED AT LINE 1262 IN MINT.asm
VDEFS:              0A06 DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 1116 IN MINT.asm
                    > USED AT LINE 1127 IN MINT.asm
                    > USED AT LINE 1131 IN MINT.asm
                    > USED AT LINE 1234 IN MINT.asm
                    > USED AT LINE 1338 IN MINT.asm
VEDITED:            0A08 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 1330 IN MINT.asm
VHEAPPTR:           0A0E DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 188 IN MINT.asm
                    > USED AT LINE 197 IN MINT.asm
                    > USED AT LINE 592 IN MINT.asm
                    > USED AT LINE 897 IN MINT.asm
                    > USED AT LINE 913 IN MINT.asm
                    > USED AT LINE 1278 IN MINT.asm
VBYTEMODE:          0A36 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 190 IN MINT.asm
                    > USED AT LINE 591 IN MINT.asm
                    > USED AT LINE 1281 IN MINT.asm
TBPTR:              0A68 DEFINED AT LINE 46 IN ram.asm
RST08:              0A6A DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              0A6C DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              0A6E DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              0A70 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              0A72 DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              0A74 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               0A76 DEFINED AT LINE 54 IN ram.asm
INTVEC:             0A78 DEFINED AT LINE 55 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             0A7A DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            0A7C DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            0A7E DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
VARS:               0A80 DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 754 IN MINT.asm
DEFS:               0AC0 DEFINED AT LINE 70 IN ram.asm
                    > USED AT LINE 43 IN MINT.asm
                    > USED AT LINE 57 IN MINT.asm
                    > USED AT LINE 1129 IN MINT.asm
HEAP:               0C00 DEFINED AT LINE 72 IN ram.asm
                    > USED AT LINE 47 IN MINT.asm